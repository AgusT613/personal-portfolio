---
import Layout from "../../layouts/Layout.astro";
import Hero from "../../components/hero/Hero.astro";
import ExperienceSection from "../../components/experience/ExperienceSection.astro";
import ProjectSection from "../../components/project/ProjectSection.astro";
import AboutMe from "../../components/about_me/AboutMe.astro";
import { getLangFromUrl, useTranslations } from "../../i18n/utils";

export function getStaticPaths() {
  return [{ params: { lang: "es" } }, { params: { lang: "en" } }];
}

const t = useTranslations(getLangFromUrl(Astro.url));
---

<Layout title={t("head.title")}>
  <main class="w-4/5 relative">
    <Hero />
    <ExperienceSection />
    <ProjectSection />
    <AboutMe />
  </main>
</Layout>

<style>
  @media (width <= 370px) {
    main {
      width: 90%;
    }
  }
</style>

<script>
  // Identifies the current section that is being targeted by changing the textÂ´s color on header-nav
  const sections = document.querySelectorAll("section");
  const navItems = document.querySelectorAll("header nav div a");

  const iconsContainer = document.querySelectorAll(
    ".nav-icons-container a svg"
  );

  const currentSectionCallback = (entries: IntersectionObserverEntry[]) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        iconsContainer.forEach((item) => {
          const hasSameAttributeAndId =
            item.getAttribute("aria-label") === entry.target.id;

          if (hasSameAttributeAndId) {
            item.classList.add("current-section-focused");
            item.classList.add("bg-blue-500");
            item.classList.add("scale-110");
          } else {
            item.classList.remove("current-section-focused");
            item.classList.remove("bg-blue-500");
            item.classList.remove("scale-110");
          }
        });

        navItems.forEach((item) => {
          const hasSameAttributeAndId =
            item.getAttribute("aria-label") === entry.target.id;
          if (hasSameAttributeAndId) {
            item.classList.add("current-section-focused");
            item.classList.add("text-blue-500");
            item.classList.add("scale-110");
          } else {
            item.classList.remove("current-section-focused");
            item.classList.remove("text-blue-500");
            item.classList.remove("scale-110");
          }
        });
      }
    });
  };

  const options = {
    root: null,
    rootMargin: "0px",
    threshold: 0.15,
  };

  const observer = new IntersectionObserver(currentSectionCallback, options);

  sections.forEach((section) => observer.observe(section));

  document.onvisibilitychange = () => {
    if (document.visibilityState === "hidden") {
      observer.disconnect();
    } else {
      sections.forEach((section) => {
        observer.observe(section);
      });
    }
  };
</script>
