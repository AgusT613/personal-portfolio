---
import Layout from "../layouts/Layout.astro";
import Hero from "../components/Hero.astro";
import AboutMe from "../components/AboutMe.astro";
import Badge from "../components/Badge.astro";
import PROJECTS from "../utils/projects.js";
---

<Layout title="Torres Agustin - Portafolio">
  <main class="w-3/5">
    <Hero />

    <!-- Projects Section -->
    <section id="projects" class="flex flex-col">
      <h2 class="text-5xl text-center tracking-wider py-8">
        Proyectos Desarrollados
      </h2>
      <div class="flex flex-col gap-8">
        {
          PROJECTS.map((project) => (
            <article class="flex flex-col gap-4">
              <h3 class="text-2xl text-yellow-500">{project.name}</h3>
              <p>{project.description}</p>
              <div class="flex gap-4">
                {project.technologies.map((technology) => (
                  <Badge label={technology.label}>
                    <technology.icon class="size-6" />
                  </Badge>
                ))}
              </div>
              <picture>
                <img src={project.image.src} alt={project.image.alt} />
              </picture>
              <div class="flex gap-6 items-center justify-center">
                {project.links.map((link) => (
                  <a
                    class="bg-orange-600 rounded hover:bg-orange-400 cursor-pointer px-2 flex items-center justify-center gap-1"
                    href={link.href}
                    target="_blank"
                  >
                    {link.label}
                    <link.icon class="size-4" />
                  </a>
                ))}
              </div>
            </article>
          ))
        }
      </div>
    </section>

    <AboutMe />
  </main>
</Layout>

<!-- Identifies the current section that is being targeted by changing the textÂ´s color on header-nav -->
<script>
  const sections = document.querySelectorAll("section");
  const navItems = document.querySelectorAll("header nav a");

  const currentSectionCallback = (entries: any[]) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        navItems.forEach((item) => {
          if (item.getAttribute("aria-label") === entry.target.id) {
            item.classList.add("text-blue-500");
            item.classList.add("scale-110");
          } else {
            item.classList.remove("text-blue-500");
            item.classList.remove("scale-110");
          }
        });
      }
    });
  };

  const options = {
    root: null,
    rootMargin: "20px",
    threshold: 0.2,
  };

  const observer = new IntersectionObserver(currentSectionCallback, options);

  sections.forEach((section) => observer.observe(section));

  document.onvisibilitychange = () => {
    if (document.visibilityState === "hidden") {
      observer.disconnect();
    } else {
      sections.forEach((section) => {
        observer.observe(section);
      });
    }
  };
</script>
